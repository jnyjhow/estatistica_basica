#conventendo para data frame
#my.df <- as.data.frame(my.symbols)
my.df <- as.xts(my.symbols)
class(my.df)
#visualizar dados do df
glimpse(my.df)
print(my.df)
#primeiros elementos do dataframe
head(my.df)
#ultimos elementos do dataframe
tail(my.df)
#numero de linhas e colunas
nrow(my.df)
ncol(my.df)
#conhecendo a base de dados
dim(my.df)
names(my.df)
length(my.df)
summary(my.df)
#####
#estatistica basica
#media
my.mean <- mean(my.df$CLOSE)
my.mean
#mediana
my.median <- median(my.df$CLOSE)
my.median
#criando a funcao moda
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#obtendo a moda
my.mode <- getmode(my.df$CLOSE)
my.mode
#variancia
my.var <- var(my.df$CLOSE)
my.var
#desvio padrao
my.sd <- sd(my.df$CLOSE)
my.sd
#calculando o coeficiente de variacao
my.cv <- (my.sd / my.mean) * 100
my.cv
#####
#boxplot
library(ggplot2)
#plot
ggplot(mpg, aes(x=reorder(Index, my.df), y=my.df, fill=Index)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
#plot
ggplot(mpg, aes(x=reorder(my.df$index, my.df), y=my.df, fill=my.df$index)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
#plot
ggplot(mpg, aes(x=reorder(my.df$index, my.df$CLOSE), y=my.df, fill=my.df$index)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
#plot
ggplot(mpg, aes(x=reorder(my.df$index, my.df$CLOSE), y=my.df$CLOSE, fill=my.df$index)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
#####
#limpando o cash/workspace
rm(list = ls())
#####
#definindo pasta de trabalho
setwd('D:/2_projetos_r/')
getwd()
#####
#carregar bibliotecas/pacotes
library(quantmod)
library(dplyr)
library(PerformanceAnalytics)
#####
#ativo e data para analise
#apenas um ativo
my.tickers <- 'PETR4.SA'
#####
#ativo e data para analise
first.date <- '2018-01-01'
last.date <- Sys.Date()
my.bench <- '^BVSP'
#carregando dados
#auto.assign = F, os dados sao atribuidos a variavel criada
#auto.assign = T, e criada uma nova variavel com o ativo escolhido
#my.symbols <- getSymbols(my.tickers, src = "yahoo", from = first.date, to = last.date, auto.assign = FALSE)
my.symbols <- getSymbols(my.tickers, src = 'yahoo', from = first.date, to = last.date, auto.assign = FALSE)
#renomenado oas colunas do df
names(my.symbols) <- c('OPEN', 'HIGH', 'LOW', 'CLOSE', 'TICK_VOL', 'ADJUSTED')
names(my.symbols)
#verificando se a base de dados contem valores nulos
sapply(my.symbols, function(x) sum(is.na(x)))
#se sim, remove.
my.symbols <- my.symbols[complete.cases(my.symbols), ]
#####
#conventendo para data frame
#my.df <- as.data.frame(my.symbols)
my.df <- as.xts(my.symbols)
class(my.df)
#visualizar dados do df
glimpse(my.df)
print(my.df)
#primeiros elementos do dataframe
head(my.df)
#ultimos elementos do dataframe
tail(my.df)
#numero de linhas e colunas
nrow(my.df)
ncol(my.df)
#conhecendo a base de dados
dim(my.df)
names(my.df)
length(my.df)
summary(my.df)
#####
#estatistica basica
#media
my.mean <- mean(my.df$CLOSE)
my.mean
#mediana
my.median <- median(my.df$CLOSE)
my.median
#criando a funcao moda
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#obtendo a moda
my.mode <- getmode(my.df$CLOSE)
my.mode
#variancia
my.var <- var(my.df$CLOSE)
my.var
#desvio padrao
my.sd <- sd(my.df$CLOSE)
my.sd
#calculando o coeficiente de variacao
my.cv <- (my.sd / my.mean) * 100
my.cv
#####
#boxplot
library(ggplot2)
#plot
ggplot(mpg, aes(x=reorder(class, my.df$CLOSE), y=my.df$CLOSE, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
#####
#boxplot
library(ggplot2)
#plot
ggplot(mpg, aes(x=reorder(class, my.df), y=my.df, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
#####
#calculando os retornos
#daily.return <- na.omit(ROC(my.df$CLOSE, type='discrete'))
daily.return <- dailyReturn(my.df$CLOSE)
#####
#limpando o cash/workspace
rm(list = ls())
use.market <- 1
#####
#definindo pasta de trabalho
if (use.market == 0){
setwd('D:/public/investimentos/0_others_db/0_relatorio_cot/0_forex/')
getwd()
}
if(use.market == 1){
setwd('D:/public/investimentos/0_others_db/0_relatorio_cot/0_b3/')
getwd()
}
#####
#carregar bibliotecas/pacotes
#library(dplyr)
#library(tidyr)
library(data.table)
library(tidyverse)
library(stringr)
#####
#importando arquivo .CSV local
if (use.market == 0){
my.file <- 'USDJPYDaily.csv'
}
if(use.market == 1){
my.file <- 'DOL@Daily.csv'
}
#?read_csv
my.symbols <- read.csv(my.file, header = FALSE, sep = ',', skipNul = TRUE)
class(my.symbols)
#####
#conventendo para data frame
#my.df <- as.data.frame(my.symbols)
#my.df <- as.data.table(my.symbols)
my.df <- tbl_df(my.symbols)
class(my.df)
#visualizar dados do df
glimpse(my.df)
print(my.df)
#tratando  o data frame
my.df$V1 <- str_sub(my.df$V1, start = -10)
glimpse(my.df)
#conhecendo a base de dados
dim(my.df)
names(my.df)
#renomenado oas colunas do df
names(my.df) <- c('DATA', 'OPEN', 'HIGH', 'LOW', 'CLOSE', 'TICK_VOL', 'SPREAD')
names(my.df)
summary(my.df)
#utiliza apenas os nomes da coluna sem my.df$
attach(my.df)
#tratando cada variavel
my.day <- str_sub(my.df$DATA, start = -2)
head(my.day)
my.month2 <- str_sub(my.df$DATA, start = -5)
head(my.month2)
my.month <- str_sub(my.month2, start = 1, end = 2)
head(my.month)
my.year <- str_sub(my.df$DATA, start = 1, end = 4)
head(my.year)
my.df$DATE <- str_c(my.year, "-", my.month, "-", my.day)
glimpse(my.df)
#convertendo a data
my.df$DATE <- as.Date(my.df$DATE)
glimpse(my.df)
#excluindo a coluna DATA anterir
my.df$DATA <- NULL
glimpse(my.df)
summary(my.df)
#primeiros elementos do dataframe
head(my.df)
#ultimos elementos do dataframe
tail(my.df)
#numero de linhas e colunas
nrow(my.df)
ncol(my.df)
#conhecendo a base de dados
dim(my.df)
names(my.df)
length(my.df)
summary(my.df)
#####
#tratando as datas
#dia, (numero e nome) do mes e ano atual
my.current.date <- Sys.Date()
my.current.date
my.current.month <- months.Date(my.current.date, abbreviate = FALSE)
my.current.month
my.number.current.month <- month(my.current.date)
my.number.current.month
my.current.year <- year(my.current.date)
my.current.year
#dia (numero) e nome da semana
my.number.current.week <- week(my.current.date)
my.number.current.week
my.name.current.week <- weekdays(my.current.date, abbreviate = FALSE)
my.name.current.week
#####
#modificando/manipulando dados
#convertendo para data
filter(my.df, DATE == my.current.date)
filter(my.df, year(DATE) == my.current.year)
#exportando
#exportando
#write_csv(x = my.df, path = '0_example_exporting.csv')
View(my.df)
#####
#conventendo para data frame
#my.df <- as.data.frame(my.symbols)
my.xts <- as.xts(my.df)
#####
#limpando o cash/workspace
rm(list = ls())
#####
#definindo pasta de trabalho
setwd('D:/2_projetos_r/')
getwd()
#####
#carregar bibliotecas/pacotes
library(quantmod)
library(dplyr)
library(PerformanceAnalytics)
#####
#ativo e data para analise
#multiplos ativos
my.tickers <- c('MMM', 'C', 'AAPL', 'AMZN')
my.weights <- c(0.25, 0.25, 0.25, 0.25)
#####
#ativo e data para analise
first.date <- '2018-01-01'
last.date <- Sys.Date()
my.bench <- '^BVSP'
my.symbols <- NULL
#retornos semanais ou mensais
periodic.data <- my.tickers %>% lapply(function(x) getSymbols(x, src = 'yahoo', from = first.date, to = last.date, auto.assign=FALSE)[,4]) %>%
lapply(function(x) dailyReturn(x))
head(print(periodic.return <- do.call(merge, periodic.data)))
#deletando todas as datas sem valores
my.symbols <- periodic.return[apply(my.tickers,1,function(x) all(!is.na(x))),]
#deletando todas as datas sem valores
my.symbols <- periodic.return[apply(my.tickers,0,function(x) all(!is.na(x))),]
View(periodic.return)
#####
#limpando o cash/workspace
rm(list = ls())
#####
#limpando o cash/workspace
rm(list = ls())
#####
#definindo pasta de trabalho
setwd('D:/2_projetos_r/estatistica_basica/')
getwd()
#####
#carregar bibliotecas/pacotes
##caso nao tenha as bibliotecas instaladas = <<<install.packages("data.table")>>>
##utilizar modelo acima entre <<<INSTALAR BIBLIOTECAS>>>
library(data.table)
library(tidyverse)
library(stringr)
#####
#importando arquivo .CSV local
my.file <- 'USDJPYDaily.csv'
#?read_csv
my.symbols <- read.csv(my.file, header = FALSE, sep = ',', skipNul = TRUE)
class(my.symbols)
#####
#conventendo para data frame
#my.df <- as.data.frame(my.symbols)
#my.df <- as.data.table(my.symbols)
my.df <- tbl_df(my.symbols)
class(my.df)
#visualizar dados do df
glimpse(my.df)
print(my.df)
#tratando  o data frame
my.df$V1 <- str_sub(my.df$V1, start = -10)
glimpse(my.df)
#conhecendo a base de dados
dim(my.df)
names(my.df)
#renomenado oas colunas do df
names(my.df) <- c('DATA', 'OPEN', 'HIGH', 'LOW', 'CLOSE', 'TICK_VOL', 'SPREAD')
names(my.df)
summary(my.df)
summary(my.df)
#tratando cada variavel
my.day <- str_sub(my.df$DATA, start = -2)
head(my.day)
my.month2 <- str_sub(my.df$DATA, start = -5)
head(my.month2)
my.month <- str_sub(my.month2, start = 1, end = 2)
head(my.month)
my.year <- str_sub(my.df$DATA, start = 1, end = 4)
head(my.year)
my.df$DATE <- str_c(my.year, "-", my.month, "-", my.day)
glimpse(my.df)
#convertendo a data
my.df$DATE <- as.Date(my.df$DATE)
glimpse(my.df)
#excluindo a coluna DATA anterir
my.df$DATA <- NULL
glimpse(my.df)
summary(my.df)
#primeiros elementos do dataframe
head(my.df)
#ultimos elementos do dataframe
tail(my.df)
#numero de linhas e colunas
nrow(my.df)
ncol(my.df)
#conhecendo a base de dados
dim(my.df)
names(my.df)
length(my.df)
summary(my.df)
#####
#tratando as datas
#dia, (numero e nome) do mes e ano atual
my.current.date <- Sys.Date()
my.current.date
my.current.month <- months.Date(my.current.date, abbreviate = FALSE)
my.current.month
my.number.current.month <- month(my.current.date)
my.number.current.month
my.current.year <- year(my.current.date)
my.current.year
#dia (numero) e nome da semana
my.number.current.week <- week(my.current.date)
my.number.current.week
my.name.current.week <- weekdays(my.current.date, abbreviate = FALSE)
my.name.current.week
#####
#modificando/manipulando dados
#convertendo para data
filter(my.df, DATE == my.current.date)
filter(my.df, year(DATE) == my.current.year)
#####
#limpando o cash/workspace
rm(list = ls())
#####
#definindo pasta de trabalho
setwd('D:/2_projetos_r/estatistica_basica/')
getwd()
#####
#carregar bibliotecas/pacotes
##caso nao tenha as bibliotecas instaladas = <<<install.packages("data.table")>>>
##utilizar modelo acima entre <<<INSTALAR BIBLIOTECAS>>>
library(data.table)
library(tidyverse)
library(stringr)
#####
#importando arquivo .CSV local
my.file <- 'USDJPYDaily.csv'
#####
#limpando o cash/workspace
rm(list = ls())
#####
#definindo pasta de trabalho
setwd('D:/2_projetos_r/estatistica_basica/')
getwd()
#####
#carregar bibliotecas/pacotes
##caso nao tenha as bibliotecas instaladas = <<<install.packages("data.table")>>>
##utilizar modelo acima entre <<<INSTALAR BIBLIOTECAS>>>
library(data.table)
#####
#importando arquivo .CSV local
my.file <- 'USDJPYDaily.csv'
#?read_csv
my.symbols <- read.csv(my.file, header = FALSE, sep = ',', skipNul = TRUE)
class(my.symbols)
#####
#conventendo para data frame
#my.df <- as.data.frame(my.symbols)
#my.df <- as.data.table(my.symbols)
my.df <- tbl_df(my.symbols)
class(my.df)
#visualizar dados do df
glimpse(my.df)
print(my.df)
#tratando  o data frame
my.df$V1 <- str_sub(my.df$V1, start = -10)
glimpse(my.df)
#conhecendo a base de dados
dim(my.df)
names(my.df)
#renomenado oas colunas do df
names(my.df) <- c('DATA', 'OPEN', 'HIGH', 'LOW', 'CLOSE', 'TICK_VOL', 'SPREAD')
names(my.df)
#tratando cada variavel
my.day <- str_sub(my.df$DATA, start = -2)
head(my.day)
my.month2 <- str_sub(my.df$DATA, start = -5)
head(my.month2)
my.month <- str_sub(my.month2, start = 1, end = 2)
head(my.month)
my.year <- str_sub(my.df$DATA, start = 1, end = 4)
head(my.year)
my.df$DATE <- str_c(my.year, "-", my.month, "-", my.day)
glimpse(my.df)
#convertendo a data
my.df$DATE <- as.Date(my.df$DATE)
glimpse(my.df)
#excluindo a coluna DATA anterir
my.df$DATA <- NULL
glimpse(my.df)
summary(my.df)
#primeiros elementos do dataframe
head(my.df)
#ultimos elementos do dataframe
tail(my.df)
#numero de linhas e colunas
nrow(my.df)
ncol(my.df)
#conhecendo a base de dados
dim(my.df)
names(my.df)
length(my.df)
#####
#estatistica basica
#media
my.mean <- mean(my.df$CLOSE)
my.mean
#mediana
my.median <- median(my.df$CLOSE)
my.median
#criando a funcao moda
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#obtendo a moda
my.mode <- getmode(my.df$CLOSE)
my.mode
#variancia
my.var <- var(my.df$CLOSE)
my.var
#desvio padrao
my.sd <- sd(my.df$CLOSE)
my.sd
#calculando o coeficiente de variacao
my.cv <- (my.sd / my.mean) * 100
my.cv
#ou utilizar apenas o comando abaixo
summary(my.df)
